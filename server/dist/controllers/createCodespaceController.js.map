{
  "version": 3,
  "sources": ["../../src/controllers/createCodespaceController.ts", "../../src/codespace/Codespace.ts", "../../src/codespace/CodespaceRegistry.ts", "../../src/codespace/User.ts"],
  "sourcesContent": ["import { Request, Response } from \"express\";\nimport CodespaceRegistry from \"../codespace/CodespaceRegistry\";\nimport User from \"../codespace/User\";\nimport Codespace from \"../codespace/Codespace\";\n\nexport default function createCodespace(req: Request, res: Response) {\n  const { username } = req.body;\n\n  if(!username || typeof username !== \"string\") {\n    res.status(200).send({\n      success: false\n    })\n    return;\n  }\n\n  const codespaceId: string = CodespaceRegistry.createNewCodespace();\n  const user: User = new User(username, 500, 500);\n\n  const codespace: Codespace | null = CodespaceRegistry.getCodespace(codespaceId);\n\n  if(!codespace) {\n    res.status(200).send({\n      success: false\n    })\n    return;\n  }\n\n  codespace.addUser(user);\n\n  res.status(200).send({\n    success: true,\n    codespaceId\n  })\n\n}", "import SyncodeFile from \"./File.js\";\nimport User from \"./User.js\";\nimport crypto from \"node:crypto\"\n\nfunction generateCodespaceId() { \n  return crypto.randomBytes(16).toString('base64url');\n}\n\nclass Codespace {\n  codespaceId: string = \"\"\n  private users: Record<string, User> = {};\n  private files: SyncodeFile[] = [];\n\n  constructor() {\n    this.codespaceId = generateCodespaceId();\n  }\n\n  addUser(user: User) {\n    this.users[user.username] = user;\n  }\n}\n\nexport default Codespace", "import Codespace from \"./Codespace\";\n\nclass CodespaceRegistryTemplate {\n  private codespaces:Record<string, Codespace> = {};\n\n  /**\n   * Creates a new codespace\n   * @returns ID of newly generated codespace.\n   */\n  createNewCodespace(): string {\n    const newcodespace = new Codespace();\n    this.codespaces[newcodespace.codespaceId] = newcodespace;\n    return newcodespace.codespaceId\n  }\n\n  codespaceExists(codespaceId: string): boolean {\n    return Boolean(this.codespaces[codespaceId])\n  }\n\n  getCodespace(codespaceId: string): Codespace | null {\n    if(this.codespaceExists(codespaceId)) {\n      return this.codespaces[codespaceId];\n    } else {\n      return null;\n    }\n  }\n\n}\n\n/**\n * Codespace Registry\n */\nconst CodespaceRegistry = new CodespaceRegistryTemplate();\n\nexport default CodespaceRegistry;", "class User {\n  username: string = \"unknown\"\n  mouseX: number = 0.5;\n  mouseY: number = 0.5;\n\n  constructor(username: string, mouseX: number, mouseY: number) {\n    this.username = username;\n    this.mouseX = mouseX;\n    this.mouseY = mouseY;\n  }\n\n  setMousePos(mouseX: number, mouseY: number) {\n    this.mouseX = mouseX;\n    this.mouseY = mouseY;\n  }\n}\n\nexport default User;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACEA,yBAAmB;AAEnB,SAAS,sBAAsB;AAC7B,SAAO,mBAAAA,QAAO,YAAY,EAAE,EAAE,SAAS,WAAW;AACpD;AAEA,IAAM,YAAN,MAAgB;AAAA,EACd,cAAsB;AAAA,EACd,QAA8B,CAAC;AAAA,EAC/B,QAAuB,CAAC;AAAA,EAEhC,cAAc;AACZ,SAAK,cAAc,oBAAoB;AAAA,EACzC;AAAA,EAEA,QAAQ,MAAY;AAClB,SAAK,MAAM,KAAK,QAAQ,IAAI;AAAA,EAC9B;AACF;AAEA,IAAO,oBAAQ;;;ACpBf,IAAM,4BAAN,MAAgC;AAAA,EACtB,aAAuC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhD,qBAA6B;AAC3B,UAAM,eAAe,IAAI,kBAAU;AACnC,SAAK,WAAW,aAAa,WAAW,IAAI;AAC5C,WAAO,aAAa;AAAA,EACtB;AAAA,EAEA,gBAAgB,aAA8B;AAC5C,WAAO,QAAQ,KAAK,WAAW,WAAW,CAAC;AAAA,EAC7C;AAAA,EAEA,aAAa,aAAuC;AAClD,QAAG,KAAK,gBAAgB,WAAW,GAAG;AACpC,aAAO,KAAK,WAAW,WAAW;AAAA,IACpC,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAEF;AAKA,IAAM,oBAAoB,IAAI,0BAA0B;AAExD,IAAO,4BAAQ;;;AClCf,IAAM,OAAN,MAAW;AAAA,EACT,WAAmB;AAAA,EACnB,SAAiB;AAAA,EACjB,SAAiB;AAAA,EAEjB,YAAY,UAAkB,QAAgB,QAAgB;AAC5D,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,YAAY,QAAgB,QAAgB;AAC1C,SAAK,SAAS;AACd,SAAK,SAAS;AAAA,EAChB;AACF;AAEA,IAAO,eAAQ;;;AHZA,SAAR,gBAAiC,KAAc,KAAe;AACnE,QAAM,EAAE,SAAS,IAAI,IAAI;AAEzB,MAAG,CAAC,YAAY,OAAO,aAAa,UAAU;AAC5C,QAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MACnB,SAAS;AAAA,IACX,CAAC;AACD;AAAA,EACF;AAEA,QAAM,cAAsB,0BAAkB,mBAAmB;AACjE,QAAM,OAAa,IAAI,aAAK,UAAU,KAAK,GAAG;AAE9C,QAAM,YAA8B,0BAAkB,aAAa,WAAW;AAE9E,MAAG,CAAC,WAAW;AACb,QAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MACnB,SAAS;AAAA,IACX,CAAC;AACD;AAAA,EACF;AAEA,YAAU,QAAQ,IAAI;AAEtB,MAAI,OAAO,GAAG,EAAE,KAAK;AAAA,IACnB,SAAS;AAAA,IACT;AAAA,EACF,CAAC;AAEH;",
  "names": ["crypto"]
}
