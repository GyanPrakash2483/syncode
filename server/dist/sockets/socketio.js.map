{
  "version": 3,
  "sources": ["../../src/sockets/socketio.ts", "../../src/codespace/File.ts", "../../src/codespace/Codespace.ts", "../../src/codespace/CodespaceRegistry.ts"],
  "sourcesContent": ["import { Server, Socket } from \"socket.io\";\nimport CodespaceRegistry from \"../codespace/CodespaceRegistry\";\n\nexport default function socketio(io: Server, socket: Socket) {\n  socket.on('reguser', (data) => {\n    socket.join(data.codespaceId);\n    const codespace = CodespaceRegistry.getCodespace(data.codespaceId);\n    codespace?.files.forEach((file) => {\n      socket.emit('fileupdate', {\n        filename: file.filename,\n        content: file.content\n      })\n    })\n  })\n\n  socket.on('mousemove', (data) => {\n    socket.to(data.codespaceId).emit('mouseupdate', {\n      username: data.username,\n      mouseX: data.mouseX,\n      mouseY: data.mouseY\n    })\n  })\n\n\n  socket.on('clientfileupdate', (data) => {\n    const codespace = CodespaceRegistry.getCodespace(data.codespaceId);\n    codespace?.updateFile(data.filename, data.content);\n    console.log(data)\n    socket.to(data.codespaceId).emit('fileupdate', {\n      filename: data.filename,\n      content: data.content\n    })\n\n  })\n\n}", "class SyncodeFile {\n  filename: string = \"/newfile\";\n  content: string = \"\"\n\n  constructor(filename: string, content: string) {\n    this.filename = filename;\n    this.content = content;\n  }\n\n  updateContent(newcontent: string) {\n    this.content = newcontent;\n  }\n\n}\n\nexport default SyncodeFile", "import SyncodeFile from \"./File.js\";\nimport crypto from \"node:crypto\"\n\nfunction generateCodespaceId() { \n  return crypto.randomBytes(16).toString('base64url');\n}\n\nclass Codespace {\n  codespaceId: string = \"\"\n  files: SyncodeFile[] = [];\n\n  constructor() {\n    this.codespaceId = generateCodespaceId();\n    const welcomeFile = new SyncodeFile(\"welcome.txt\", `\n      Welcome to Syncode\n      Start by creating a new file  \n    `)\n    this.files.push(welcomeFile);\n    const licenseFile = new SyncodeFile(\"license.txt\", `\n      License\n      No naughty!\n    `)\n    this.files.push(licenseFile);\n    const codeFile = new SyncodeFile(\"src/index.js\", `\n      console.log(\"Hello, World!\");\n    `)\n    this.files.push(codeFile);\n  }\n\n  updateFile(filename: string, content: string) {\n    const existingfile = this.files.find((file) => file.filename === filename);\n\n    if(existingfile) {\n      existingfile.content = content;\n    } else {\n      const newFile = new SyncodeFile(filename, content);\n      this.files.push(newFile);\n    }\n  }\n\n}\n\nexport default Codespace", "import Codespace from \"./Codespace\";\n\nclass CodespaceRegistryTemplate {\n  private codespaces:Record<string, Codespace> = {};\n\n  /**\n   * Creates a new codespace\n   * @returns ID of newly generated codespace.\n   */\n  createNewCodespace(): string {\n    const newcodespace = new Codespace();\n    this.codespaces[newcodespace.codespaceId] = newcodespace;\n    return newcodespace.codespaceId\n  }\n\n  codespaceExists(codespaceId: string): boolean {\n    return Boolean(this.codespaces[codespaceId])\n  }\n\n  getCodespace(codespaceId: string): Codespace | null {\n    if(this.codespaceExists(codespaceId)) {\n      return this.codespaces[codespaceId];\n    } else {\n      return null;\n    }\n  }\n\n}\n\n/**\n * Codespace Registry\n */\nconst CodespaceRegistry = new CodespaceRegistryTemplate();\n\nexport default CodespaceRegistry;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAM,cAAN,MAAkB;AAAA,EAChB,WAAmB;AAAA,EACnB,UAAkB;AAAA,EAElB,YAAY,UAAkB,SAAiB;AAC7C,SAAK,WAAW;AAChB,SAAK,UAAU;AAAA,EACjB;AAAA,EAEA,cAAc,YAAoB;AAChC,SAAK,UAAU;AAAA,EACjB;AAEF;AAEA,IAAO,eAAQ;;;ACdf,yBAAmB;AAEnB,SAAS,sBAAsB;AAC7B,SAAO,mBAAAA,QAAO,YAAY,EAAE,EAAE,SAAS,WAAW;AACpD;AAEA,IAAM,YAAN,MAAgB;AAAA,EACd,cAAsB;AAAA,EACtB,QAAuB,CAAC;AAAA,EAExB,cAAc;AACZ,SAAK,cAAc,oBAAoB;AACvC,UAAM,cAAc,IAAI,aAAY,eAAe;AAAA;AAAA;AAAA,KAGlD;AACD,SAAK,MAAM,KAAK,WAAW;AAC3B,UAAM,cAAc,IAAI,aAAY,eAAe;AAAA;AAAA;AAAA,KAGlD;AACD,SAAK,MAAM,KAAK,WAAW;AAC3B,UAAM,WAAW,IAAI,aAAY,gBAAgB;AAAA;AAAA,KAEhD;AACD,SAAK,MAAM,KAAK,QAAQ;AAAA,EAC1B;AAAA,EAEA,WAAW,UAAkB,SAAiB;AAC5C,UAAM,eAAe,KAAK,MAAM,KAAK,CAAC,SAAS,KAAK,aAAa,QAAQ;AAEzE,QAAG,cAAc;AACf,mBAAa,UAAU;AAAA,IACzB,OAAO;AACL,YAAM,UAAU,IAAI,aAAY,UAAU,OAAO;AACjD,WAAK,MAAM,KAAK,OAAO;AAAA,IACzB;AAAA,EACF;AAEF;AAEA,IAAO,oBAAQ;;;ACxCf,IAAM,4BAAN,MAAgC;AAAA,EACtB,aAAuC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhD,qBAA6B;AAC3B,UAAM,eAAe,IAAI,kBAAU;AACnC,SAAK,WAAW,aAAa,WAAW,IAAI;AAC5C,WAAO,aAAa;AAAA,EACtB;AAAA,EAEA,gBAAgB,aAA8B;AAC5C,WAAO,QAAQ,KAAK,WAAW,WAAW,CAAC;AAAA,EAC7C;AAAA,EAEA,aAAa,aAAuC;AAClD,QAAG,KAAK,gBAAgB,WAAW,GAAG;AACpC,aAAO,KAAK,WAAW,WAAW;AAAA,IACpC,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAEF;AAKA,IAAM,oBAAoB,IAAI,0BAA0B;AAExD,IAAO,4BAAQ;;;AH/BA,SAAR,SAA0B,IAAY,QAAgB;AAC3D,SAAO,GAAG,WAAW,CAAC,SAAS;AAC7B,WAAO,KAAK,KAAK,WAAW;AAC5B,UAAM,YAAY,0BAAkB,aAAa,KAAK,WAAW;AACjE,eAAW,MAAM,QAAQ,CAAC,SAAS;AACjC,aAAO,KAAK,cAAc;AAAA,QACxB,UAAU,KAAK;AAAA,QACf,SAAS,KAAK;AAAA,MAChB,CAAC;AAAA,IACH,CAAC;AAAA,EACH,CAAC;AAED,SAAO,GAAG,aAAa,CAAC,SAAS;AAC/B,WAAO,GAAG,KAAK,WAAW,EAAE,KAAK,eAAe;AAAA,MAC9C,UAAU,KAAK;AAAA,MACf,QAAQ,KAAK;AAAA,MACb,QAAQ,KAAK;AAAA,IACf,CAAC;AAAA,EACH,CAAC;AAGD,SAAO,GAAG,oBAAoB,CAAC,SAAS;AACtC,UAAM,YAAY,0BAAkB,aAAa,KAAK,WAAW;AACjE,eAAW,WAAW,KAAK,UAAU,KAAK,OAAO;AACjD,YAAQ,IAAI,IAAI;AAChB,WAAO,GAAG,KAAK,WAAW,EAAE,KAAK,cAAc;AAAA,MAC7C,UAAU,KAAK;AAAA,MACf,SAAS,KAAK;AAAA,IAChB,CAAC;AAAA,EAEH,CAAC;AAEH;",
  "names": ["crypto"]
}
