{
  "version": 3,
  "sources": ["../../src/codespace/CodespaceRegistry.ts", "../../src/codespace/File.ts", "../../src/codespace/Codespace.ts"],
  "sourcesContent": ["import Codespace from \"./Codespace\";\n\nclass CodespaceRegistryTemplate {\n  private codespaces:Record<string, Codespace> = {};\n\n  /**\n   * Creates a new codespace\n   * @returns ID of newly generated codespace.\n   */\n  createNewCodespace(): string {\n    const newcodespace = new Codespace();\n    this.codespaces[newcodespace.codespaceId] = newcodespace;\n    return newcodespace.codespaceId\n  }\n\n  codespaceExists(codespaceId: string): boolean {\n    return Boolean(this.codespaces[codespaceId])\n  }\n\n  getCodespace(codespaceId: string): Codespace | null {\n    if(this.codespaceExists(codespaceId)) {\n      return this.codespaces[codespaceId];\n    } else {\n      return null;\n    }\n  }\n\n}\n\n/**\n * Codespace Registry\n */\nconst CodespaceRegistry = new CodespaceRegistryTemplate();\n\nexport default CodespaceRegistry;", "class SyncodeFile {\n  filename: string = \"/newfile\";\n  content: string = \"\"\n\n  constructor(filename: string, content: string) {\n    this.filename = filename;\n    this.content = content;\n  }\n\n  updateContent(newcontent: string) {\n    this.content = newcontent;\n  }\n\n}\n\nexport default SyncodeFile", "import SyncodeFile from \"./File.js\";\nimport crypto from \"node:crypto\"\n\nfunction generateCodespaceId() { \n  return crypto.randomBytes(16).toString('base64url');\n}\n\nclass Codespace {\n  codespaceId: string = \"\"\n  files: SyncodeFile[] = [];\n\n  constructor() {\n    this.codespaceId = generateCodespaceId();\n    const welcomeFile = new SyncodeFile(\"welcome.txt\", `\n      Welcome to Syncode\n      Start by creating a new file  \n    `)\n    this.files.push(welcomeFile);\n    const licenseFile = new SyncodeFile(\"license.txt\", `\n      License\n      No naughty!\n    `)\n    this.files.push(licenseFile);\n    const codeFile = new SyncodeFile(\"src/index.js\", `\n      console.log(\"Hello, World!\");\n    `)\n    this.files.push(codeFile);\n  }\n\n  updateFile(filename: string, content: string) {\n    const existingfile = this.files.find((file) => file.filename === filename);\n\n    if(existingfile) {\n      existingfile.content = content;\n    } else {\n      const newFile = new SyncodeFile(filename, content);\n      this.files.push(newFile);\n    }\n  }\n\n  deleteFile(filename: string) {\n    const fileIndex = this.files.findIndex((file) => file.filename === filename);\n    if(fileIndex != -1) {\n      this.files.splice(fileIndex, 1);\n    }\n  }\n\n  renameFile(prevFileName: string, newFileName: string) {\n    const existingFile = this.files.find((file) => file.filename === prevFileName);\n\n    if(existingFile) {\n      existingFile.filename = newFileName;\n    }\n  }\n\n}\n\nexport default Codespace"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAM,cAAN,MAAkB;AAAA,EAChB,WAAmB;AAAA,EACnB,UAAkB;AAAA,EAElB,YAAY,UAAkB,SAAiB;AAC7C,SAAK,WAAW;AAChB,SAAK,UAAU;AAAA,EACjB;AAAA,EAEA,cAAc,YAAoB;AAChC,SAAK,UAAU;AAAA,EACjB;AAEF;AAEA,IAAO,eAAQ;;;ACdf,yBAAmB;AAEnB,SAAS,sBAAsB;AAC7B,SAAO,mBAAAA,QAAO,YAAY,EAAE,EAAE,SAAS,WAAW;AACpD;AAEA,IAAM,YAAN,MAAgB;AAAA,EACd,cAAsB;AAAA,EACtB,QAAuB,CAAC;AAAA,EAExB,cAAc;AACZ,SAAK,cAAc,oBAAoB;AACvC,UAAM,cAAc,IAAI,aAAY,eAAe;AAAA;AAAA;AAAA,KAGlD;AACD,SAAK,MAAM,KAAK,WAAW;AAC3B,UAAM,cAAc,IAAI,aAAY,eAAe;AAAA;AAAA;AAAA,KAGlD;AACD,SAAK,MAAM,KAAK,WAAW;AAC3B,UAAM,WAAW,IAAI,aAAY,gBAAgB;AAAA;AAAA,KAEhD;AACD,SAAK,MAAM,KAAK,QAAQ;AAAA,EAC1B;AAAA,EAEA,WAAW,UAAkB,SAAiB;AAC5C,UAAM,eAAe,KAAK,MAAM,KAAK,CAAC,SAAS,KAAK,aAAa,QAAQ;AAEzE,QAAG,cAAc;AACf,mBAAa,UAAU;AAAA,IACzB,OAAO;AACL,YAAM,UAAU,IAAI,aAAY,UAAU,OAAO;AACjD,WAAK,MAAM,KAAK,OAAO;AAAA,IACzB;AAAA,EACF;AAAA,EAEA,WAAW,UAAkB;AAC3B,UAAM,YAAY,KAAK,MAAM,UAAU,CAAC,SAAS,KAAK,aAAa,QAAQ;AAC3E,QAAG,aAAa,IAAI;AAClB,WAAK,MAAM,OAAO,WAAW,CAAC;AAAA,IAChC;AAAA,EACF;AAAA,EAEA,WAAW,cAAsB,aAAqB;AACpD,UAAM,eAAe,KAAK,MAAM,KAAK,CAAC,SAAS,KAAK,aAAa,YAAY;AAE7E,QAAG,cAAc;AACf,mBAAa,WAAW;AAAA,IAC1B;AAAA,EACF;AAEF;AAEA,IAAO,oBAAQ;;;AFvDf,IAAM,4BAAN,MAAgC;AAAA,EACtB,aAAuC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhD,qBAA6B;AAC3B,UAAM,eAAe,IAAI,kBAAU;AACnC,SAAK,WAAW,aAAa,WAAW,IAAI;AAC5C,WAAO,aAAa;AAAA,EACtB;AAAA,EAEA,gBAAgB,aAA8B;AAC5C,WAAO,QAAQ,KAAK,WAAW,WAAW,CAAC;AAAA,EAC7C;AAAA,EAEA,aAAa,aAAuC;AAClD,QAAG,KAAK,gBAAgB,WAAW,GAAG;AACpC,aAAO,KAAK,WAAW,WAAW;AAAA,IACpC,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAEF;AAKA,IAAM,oBAAoB,IAAI,0BAA0B;AAExD,IAAO,4BAAQ;",
  "names": ["crypto"]
}
