{
  "version": 3,
  "sources": ["../../src/codespace/CodespaceRegistry.ts", "../../src/codespace/Codespace.ts"],
  "sourcesContent": ["import Codespace from \"./Codespace\";\n\nclass CodespaceRegistryTemplate {\n  private codespaces:Record<string, Codespace> = {};\n\n  /**\n   * Creates a new codespace\n   * @returns ID of newly generated codespace.\n   */\n  createNewCodespace(): string {\n    const newcodespace = new Codespace();\n    this.codespaces[newcodespace.codespaceId] = newcodespace;\n    return newcodespace.codespaceId\n  }\n\n  codespaceExists(codespaceId: string): boolean {\n    return Boolean(this.codespaces[codespaceId])\n  }\n\n  getCodespace(codespaceId: string): Codespace | null {\n    if(this.codespaceExists(codespaceId)) {\n      return this.codespaces[codespaceId];\n    } else {\n      return null;\n    }\n  }\n\n}\n\n/**\n * Codespace Registry\n */\nconst CodespaceRegistry = new CodespaceRegistryTemplate();\n\nexport default CodespaceRegistry;", "import SyncodeFile from \"./File.js\";\nimport User from \"./User.js\";\nimport crypto from \"node:crypto\"\n\nfunction generateCodespaceId() { \n  return crypto.randomBytes(16).toString('base64url');\n}\n\nclass Codespace {\n  codespaceId: string = \"\"\n  private users: Record<string, User> = {};\n  private files: SyncodeFile[] = [];\n\n  constructor() {\n    this.codespaceId = generateCodespaceId();\n  }\n\n  addUser(user: User) {\n    this.users[user.username] = user;\n  }\n}\n\nexport default Codespace"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACEA,yBAAmB;AAEnB,SAAS,sBAAsB;AAC7B,SAAO,mBAAAA,QAAO,YAAY,EAAE,EAAE,SAAS,WAAW;AACpD;AAEA,IAAM,YAAN,MAAgB;AAAA,EACd,cAAsB;AAAA,EACd,QAA8B,CAAC;AAAA,EAC/B,QAAuB,CAAC;AAAA,EAEhC,cAAc;AACZ,SAAK,cAAc,oBAAoB;AAAA,EACzC;AAAA,EAEA,QAAQ,MAAY;AAClB,SAAK,MAAM,KAAK,QAAQ,IAAI;AAAA,EAC9B;AACF;AAEA,IAAO,oBAAQ;;;ADpBf,IAAM,4BAAN,MAAgC;AAAA,EACtB,aAAuC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhD,qBAA6B;AAC3B,UAAM,eAAe,IAAI,kBAAU;AACnC,SAAK,WAAW,aAAa,WAAW,IAAI;AAC5C,WAAO,aAAa;AAAA,EACtB;AAAA,EAEA,gBAAgB,aAA8B;AAC5C,WAAO,QAAQ,KAAK,WAAW,WAAW,CAAC;AAAA,EAC7C;AAAA,EAEA,aAAa,aAAuC;AAClD,QAAG,KAAK,gBAAgB,WAAW,GAAG;AACpC,aAAO,KAAK,WAAW,WAAW;AAAA,IACpC,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAEF;AAKA,IAAM,oBAAoB,IAAI,0BAA0B;AAExD,IAAO,4BAAQ;",
  "names": ["crypto"]
}
